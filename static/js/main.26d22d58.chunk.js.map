{"version":3,"sources":["Surya.js","Raja.js","Kalyan.js","App.js","serviceWorker.js","index.js"],"names":["Surya","React","Component","Kalyan","App","state","name","role","this","setState","data","basics","path","component","Home","S","to","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0YAEqBA,G,MCCaC,IAAMC,U,iLDChC,OAAO,2C,GAFoBA,cEAdC,E,iLAEb,OAAO,mD,GAFqBD,a,wBCQ9BE,E,YACJ,aAAc,IAAD,8BACX,+CACKC,MAAM,CACTC,KAAK,GACLC,KAAK,IAJI,E,kFAQXC,KAAKC,SAAS,CACZH,KAAKI,EAAKC,OAAOL,KACjBC,KAAKG,EAAKC,OAAOJ,S,+BAQrB,OAEE,kBAAC,IAAD,KACA,6BACE,gCAAMC,KAAKH,MAAMC,MACrB,4BAAKE,KAAKH,MAAME,MACZ,kBAAC,IAAD,CAAOK,KAAK,QAAQC,UAAWC,IAC/B,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWE,IAChC,kBAAC,IAAD,CAAOH,KAAK,UAAUC,UAAWV,U,GA3BrBD,aAkCZY,EAAK,kBACT,6BACE,kBAAC,IAAD,CAAME,GAAG,SAASC,UAAU,mBAA5B,WACA,kBAAC,IAAD,CAAMD,GAAG,UAAUC,UAAU,mBAA7B,cAIWb,ICvCKc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.26d22d58.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\nexport default class Surya extends Component{\n    render(){\n        return <h2> Surya </h2>\n    }\n}","import React from 'react';\n\n\nexport default class Raja extends React.Component{\n    constructor(){\n        super()\n        this.state={\n            count:0\n        }\n    }\n    changeState(){\n        this.setState({\n            count:this.state.count+1\n        })\n    }\n    render(){\n        var style={\n            color:'red',\n            background:'yellow'\n        }\n        return (\n            <div>\n            <h2 style={{color:\"blue\"}}> {this.state.count} </h2> \n            <button onClick={()=>this.changeState()}> Click Here </button>\n            </div>\n        )\n    }\n}\n\n// function Raja(p){\n//     return(\n//         <div>\n//             <h2> {p.name} and best friend is {p.bestfriend} </h2>\n//         </div>\n//     )\n        \n// }\n\n// export default Raja;","import React,{Component} from 'react';\n\nexport default class Kalyan extends Component{\n    render(){\n        return <h2> Kalyan's page </h2>\n    }\n}","import React,{Component} from 'react';\n// import ReactDOM from 'react-dom';\nimport './App.css';\nimport R from './Raja';\nimport S from './Surya';\nimport Kalyan from './Kalyan';\n// import './style.css';\nimport {BrowserRouter, Switch, Route, Link} from 'react-router-dom';\nimport data from './data/data.json';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      name:'',\n      role:''\n    }\n  }\n  componentWillMount(){\n    this.setState({\n      name:data.basics.name,\n      role:data.basics.role\n    })\n  }\nrender(){\n  var s={\n   color:'#fff',\n   background:'#000' \n  }\n  return(\n    \n    <BrowserRouter>\n    <div>\n      <h2> {this.state.name}</h2>\n  <h3>{this.state.role}</h3>\n      <Route path='/home' component={Home} />\n      <Route path='/surya' component={S}/>\n      <Route path='/kalyan' component={Kalyan} />\n    </div>\n    </BrowserRouter>\n  )\n}\n}\n\nconst Home=()=>(\n  <nav>\n    <Link to='/surya' className=\"btn btn-primary\"> Surya </Link>\n    <Link to='/kalyan' className=\"btn btn-primary\"> Kalyan </Link>\n\n  </nav>\n)\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}